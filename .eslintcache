[{"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/index.js":"1","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/App.js":"2","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Dashboard.js":"3","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Chart.js":"4","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/SecundaryListItems.js":"5","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Setores.js":"6","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Departamentos.js":"7","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Unidades.js":"8","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Title.js":"9","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Materiais.js":"10","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/MainListItems.js":"11","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormUnidade.js":"12","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormDepartamento.js":"13","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormMaterial.js":"14","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormSetor.js":"15","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Contratos.js":"16","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormContrato.js":"17","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Vigencias.js":"18","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormVigencia.js":"19","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormEstoque.js":"20","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Servicos.js":"21","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormServico.js":"22","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/api/serviceApi.js":"23","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Estoques.js":"24","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/helpers/formaters.js":"25","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/ipBackend.js":"26"},{"size":432,"mtime":1642351274322,"results":"27","hashOfConfig":"28"},{"size":166,"mtime":1642351274322,"results":"29","hashOfConfig":"28"},{"size":25891,"mtime":1642351274322,"results":"30","hashOfConfig":"28"},{"size":1500,"mtime":1612878095410,"results":"31","hashOfConfig":"32"},{"size":623,"mtime":1642351274322,"results":"33","hashOfConfig":"28"},{"size":2933,"mtime":1642351274322,"results":"34","hashOfConfig":"28"},{"size":2607,"mtime":1642351274322,"results":"35","hashOfConfig":"28"},{"size":2322,"mtime":1641921298598,"results":"36","hashOfConfig":"32"},{"size":343,"mtime":1642351274322,"results":"37","hashOfConfig":"28"},{"size":2804,"mtime":1642351274322,"results":"38","hashOfConfig":"28"},{"size":2610,"mtime":1623856132980,"results":"39","hashOfConfig":"32"},{"size":2141,"mtime":1613731008298,"results":"40","hashOfConfig":"32"},{"size":2696,"mtime":1613731008298,"results":"41","hashOfConfig":"32"},{"size":4155,"mtime":1642351274322,"results":"42","hashOfConfig":"28"},{"size":2994,"mtime":1613731008298,"results":"43","hashOfConfig":"32"},{"size":2820,"mtime":1642351274322,"results":"44","hashOfConfig":"28"},{"size":3558,"mtime":1642088345778,"results":"45","hashOfConfig":"32"},{"size":3186,"mtime":1642351274322,"results":"46","hashOfConfig":"28"},{"size":5234,"mtime":1642351274322,"results":"47","hashOfConfig":"28"},{"size":7767,"mtime":1642355214792,"results":"48","hashOfConfig":"28"},{"size":5810,"mtime":1642351274322,"results":"49","hashOfConfig":"28"},{"size":16844,"mtime":1642083648908,"results":"50","hashOfConfig":"32"},{"size":7262,"mtime":1642351274322,"results":"51","hashOfConfig":"28"},{"size":3464,"mtime":1642351274322,"results":"52","hashOfConfig":"28"},{"size":841,"mtime":1642351274322,"results":"53","hashOfConfig":"28"},{"size":70,"mtime":1642352318384,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16lyia5",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1dcj7cb",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/index.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/App.js",[],["110","111"],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Dashboard.js",["112"],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Chart.js",[],["113","114"],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/SecundaryListItems.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Setores.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Departamentos.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Unidades.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Title.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Materiais.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/MainListItems.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormUnidade.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormDepartamento.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormMaterial.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormSetor.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Contratos.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormContrato.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Vigencias.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormVigencia.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormEstoque.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Servicos.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/FormServico.js",["115","116"],"import React, { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport * as api from '../../api/serviceApi';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { dateFormat } from '../../helpers/formaters';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nexport default function FormServico({\n  onSave,\n  onSaveMatServ,\n  listItemsMatServ,\n  itemsServico,\n  itemsMatServ,\n  setNull,\n  unidades,\n  departamentos,\n  setores,\n  materiais,\n  editItemMatServ,\n}) {\n  const classes = useStyles();\n  const [idServico, setIdServico] = useState(null);\n  const [idMatServ, setIdMatserv] = useState(null);\n  const [numeroRs, setNumeroRs] = useState('');\n  const [numeroOs, setNumeroOs] = useState('');\n  const [abertura, setAbertura] = useState('');\n  const [fechamento, setFechamento] = useState('');\n  const [unidade, setUnidade] = useState('');\n  const [departamento, setDepartamento] = useState('');\n  const [setor, setSetor] = useState('');\n  const [obs, setObs] = useState('');\n  const [custo, setCusto] = useState('');\n  const [material, setMaterial] = useState('');\n  const [quantidade, setQuantidade] = useState('');\n  const [comentarios, setComentarios] = useState('');\n  const [matServ, setMatServ] = useState([]);\n  const [serviceDisabled, setServiceDisabled] = useState(false);\n  const [matServDisabled, setMatServDisabled] = useState(true);\n\n  useEffect(() => {\n    if (idServico) {\n      setServiceDisabled(false);\n      setMatServDisabled(false);\n    } else {\n      setServiceDisabled(false);\n      setMatServDisabled(true);\n    }\n  }, [idServico]);\n\n  useEffect(() => {\n    if (listItemsMatServ) {\n      setItemsMatServ(listItemsMatServ);\n    }\n  }, [listItemsMatServ, idServico]);\n\n  const setItemsMatServ = (data) => {\n    const newData = data\n      .filter((d) => d.numero_rs === idServico)\n      .map((r) => {\n        const [mat] = materiais.filter((m) => m.id_material === r.material);\n        return {\n          id_mat_serv: r.id_mat_serv,\n          numero_rs: idServico,\n          material: mat.id_material,\n          quantidade: r.quantidade,\n          comentarios: r.comentarios,\n          numero_item: mat.numero_item,\n          descricao: mat.descricao,\n        };\n      });\n    setMatServ(newData);\n  };\n\n  const setDataServico = (data) => {\n    setIdServico(data.id_servico);\n    setNumeroRs(data.numero_rs);\n    setNumeroOs(data.numero_os);\n    setAbertura(data.data_abertura);\n    setFechamento(data.data_fechamento);\n    setUnidade(data.unidade);\n    setDepartamento(data.departamento);\n    setSetor(data.setor);\n    setObs(data.obs);\n    setCusto(data.custo);\n  };\n\n  const setDataMatServ = (data) => {\n    setIdMatserv(data.id_mat_serv);\n    setNumeroRs(data.numero_rs);\n    setMaterial(data.material);\n    setQuantidade(data.quantidade);\n    setComentarios(data.comentarios);\n  };\n\n  const clearData = () => {\n    setIdServico(null);\n    setIdMatserv(null);\n    setNumeroRs('');\n    setNumeroOs('');\n    setAbertura('');\n    setFechamento('');\n    setUnidade('');\n    setDepartamento('');\n    setSetor('');\n    setObs('');\n    setCusto('');\n    setMaterial('');\n    setQuantidade('');\n    setComentarios('');\n    setNull();\n  };\n\n  useEffect(() => {\n    if (itemsServico) {\n      setDataServico(itemsServico);\n    }\n  }, [itemsServico]);\n\n  useEffect(() => {\n    if (itemsMatServ) {\n      setDataMatServ(itemsMatServ);\n    }\n  }, [itemsMatServ]);\n\n  const handleClearData = (event) => {\n    event.preventDefault();\n    clearData();\n  };\n\n  const handleButtonServico = async (event) => {\n    event.preventDefault();\n    const data = {\n      numero_rs: numeroRs,\n      numero_os: numeroOs,\n      data_abertura: dateFormat(abertura),\n      data_fechamento: dateFormat(fechamento),\n      unidade: unidade,\n      departamento: departamento,\n      setor: setor,\n      obs: obs,\n    };\n    if (idServico) {\n      await api.EditServico(idServico, data);\n      setMatServDisabled(false);\n      clearData();\n    } else {\n      const res = await api.InsertServico(data);\n      setIdServico(res);\n    }\n    onSave();\n  };\n\n  const handleButtonMatServ = async (event) => {\n    event.preventDefault();\n    const data = {\n      numero_rs: idServico,\n      material: material,\n      quantidade: quantidade,\n      comentarios: comentarios,\n    };\n    if (idMatServ) {\n      await api.EditMatServ(idMatServ, data);\n    } else {\n      await api.InsertMatServ(data);\n    }\n    onSave();\n    onSaveMatServ();\n    setIdMatserv(null);\n    setMaterial('');\n    setQuantidade('');\n    setComentarios('');\n  };\n\n  const deleteMatServ = async (id, event) => {\n    event.preventDefault();\n    await api.DeleteMatServ(id);\n    onSaveMatServ();\n    onSave();\n  };\n\n  const date = (value) => {\n    return new Date(value).toISOString();\n  };\n\n  const selectUnidade = (value) => {\n    setUnidade(value);\n    setDepartamento('');\n    setSetor('');\n  };\n\n  return (\n    <div>\n      <h2>Adicionar Serviço {idServico && <span>({idServico})</span>}</h2>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <FormControl>\n          <TextField\n            disabled={serviceDisabled}\n            label=\"Número RS\"\n            value={numeroRs}\n            onInput={(e) => setNumeroRs(parseInt(e.target.value))}\n          />\n        </FormControl>\n        <FormControl>\n          <TextField\n            disabled={serviceDisabled}\n            label=\"Número OS\"\n            value={numeroOs}\n            onInput={(e) => setNumeroOs(parseInt(e.target.value))}\n          />\n        </FormControl>\n        <FormControl>\n          <TextField\n            disabled={serviceDisabled}\n            label=\"Data de Abertura\"\n            type=\"date\"\n            value={\n              abertura === '' || abertura === null ? '' : dateFormat(abertura)\n            }\n            onChange={(e) =>\n              e.target.value === ''\n                ? setAbertura(null)\n                : setAbertura(date(e.target.value))\n            }\n            className={classes.textField}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </FormControl>\n        <FormControl>\n          <TextField\n            disabled={serviceDisabled}\n            label=\"Data de Fechamento\"\n            type=\"date\"\n            value={\n              fechamento === '' || fechamento === null\n                ? ''\n                : dateFormat(fechamento)\n            }\n            onChange={(e) =>\n              e.target.value === ''\n                ? setFechamento(null)\n                : setFechamento(date(e.target.value))\n            }\n            className={classes.textField}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <InputLabel>Unidade</InputLabel>\n          <Select\n            disabled={serviceDisabled}\n            native\n            value={unidade ? unidade : ''}\n            onChange={(e) => selectUnidade(parseInt(e.target.value))}\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {unidades.map((unidade) => (\n              <option key={unidade.id_unidade} value={unidade.id_unidade}>\n                {unidade.name}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        {/* <FormControl className={classes.formControl}>\n          <TextField\n            select\n            disabled={serviceDisabled}\n            label=\"Unidade\"\n            value={unidade ? unidade : ''}\n            onChange={(e) => selectUnidade(parseInt(e.target.value))}\n          >\n            {unidades.map((unidade) => (\n              <MenuItem key={unidade.id_unidade} value={unidade.id_unidade}>\n                {unidade.name}\n              </MenuItem>\n            ))}\n          </TextField>\n        </FormControl> */}\n        <FormControl className={classes.formControl}>\n          <InputLabel>Departamento</InputLabel>\n          <Select\n            disabled={serviceDisabled}\n            native\n            value={departamento ? departamento : ''}\n            onChange={(e) => setDepartamento(parseInt(e.target.value))}\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {departamentos\n              .filter((departamento) => departamento.unidade === unidade)\n              .map((departamento) => (\n                <option\n                  key={departamento.id_departamento}\n                  value={departamento.id_departamento}\n                >\n                  {departamento.name}\n                </option>\n              ))}\n          </Select>\n        </FormControl>\n        {/* <FormControl className={classes.formControl}>\n          <TextField\n            select\n            disabled={serviceDisabled}\n            label=\"Departamento\"\n            value={departamento ? departamento : ''}\n            // defaultValue=\"\"\n            onChange={(e) => setDepartamento(parseInt(e.target.value))}\n          >\n            {departamentos\n              .filter((departamento) => departamento.unidade === unidade)\n              .map((departamento) => (\n                <MenuItem\n                  key={departamento.id_departamento}\n                  value={departamento.id_departamento}\n                >\n                  {departamento.name}\n                </MenuItem>\n              ))}\n          </TextField>\n        </FormControl> */}\n        <FormControl className={classes.formControl}>\n          <InputLabel>Setor</InputLabel>\n          <Select\n            disabled={serviceDisabled}\n            native\n            value={setor ? setor : ''}\n            onChange={(e) =>\n              e.target.value === ' ' || e.target.value === null\n                ? setSetor(null)\n                : setSetor(parseInt(e.target.value))\n            }\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {setores\n              .filter((setor) => setor.departamento === departamento)\n              .map((setor) => (\n                <option key={setor.id_setor} value={setor.id_setor}>\n                  {setor.name}\n                </option>\n              ))}\n          </Select>\n        </FormControl>\n        {/* <FormControl className={classes.formControl}>\n          <TextField\n            select\n            disabled={serviceDisabled}\n            label=\"Setor\"\n            value={setor ? setor : ''}\n            // defaultValue=\"\"\n            onChange={(e) =>\n              e.target.value === ' ' || e.target.value === null\n                ? setSetor(null)\n                : setSetor(parseInt(e.target.value))\n            }\n          >\n            {setores\n              .filter((setor) => setor.departamento === departamento)\n              .map((setor) => (\n                <MenuItem key={setor.id_setor} value={setor.id_setor}>\n                  {setor.name}\n                </MenuItem>\n              ))}\n          </TextField>\n        </FormControl> */}\n        <FormControl>\n          <TextField\n            disabled={serviceDisabled}\n            label=\"Observações\"\n            value={obs}\n            onInput={(e) => setObs(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <Button\n            disabled={serviceDisabled}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButtonServico}\n            className={classes.button}\n          >\n            Inserir\n          </Button>\n        </FormControl>\n        <FormControl>\n          <Button\n            disabled={serviceDisabled}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={(e) => handleClearData(e)}\n          >\n            Limpar\n          </Button>\n        </FormControl>\n      </form>\n      <Divider />\n      <h3>Materiais do Serviço {idMatServ && <span>({idMatServ})</span>}</h3>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <FormControl>\n          <TextField\n            disabled\n            label=\" \"\n            value={`ID: ${idServico} | RS: ${numeroRs}`}\n            size=\"small\"\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <TextField\n            select\n            disabled={matServDisabled}\n            label=\"Material\"\n            value={material ? material : ''}\n            defaultValue=\"\"\n            onChange={(e) => setMaterial(parseInt(e.target.value))}\n          >\n            {materiais.map((material) => (\n              <MenuItem key={material.id_material} value={material.id_material}>\n                {material.descricao}\n              </MenuItem>\n            ))}\n          </TextField>\n        </FormControl>\n        <FormControl>\n          <TextField\n            disabled={matServDisabled}\n            label=\"Quantidade\"\n            value={quantidade}\n            onInput={(e) => setQuantidade(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <TextField\n            disabled={matServDisabled}\n            label=\"Comentários\"\n            value={comentarios}\n            onInput={(e) => setComentarios(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <Button\n            disabled={matServDisabled}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButtonMatServ}\n            className={classes.button}\n          >\n            Adicionar Material\n          </Button>\n        </FormControl>\n        <FormControl>\n          <Button\n            disabled={matServDisabled}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => handleButtonServico(e)}\n          >\n            Salvar Alterações\n          </Button>\n        </FormControl>\n        <FormControl>\n          <Button\n            disabled={matServDisabled}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={(e) => handleClearData(e)}\n          >\n            Limpar\n          </Button>\n        </FormControl>\n      </form>\n      <Divider />\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Código</TableCell>\n              <TableCell>Descrição</TableCell>\n              <TableCell align=\"center\">Quantidade</TableCell>\n              <TableCell align=\"center\">Comentários</TableCell>\n              <TableCell align=\"center\"> </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {matServ.map((row) => (\n              <TableRow key={row.id_mat_serv}>\n                <TableCell align=\"center\">{row.numero_item}</TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.descricao}\n                </TableCell>\n                <TableCell align=\"center\">{row.quantidade}</TableCell>\n                <TableCell align=\"center\">{row.comentarios}</TableCell>\n                <TableCell align=\"left\">\n                  <IconButton\n                    aria-label=\"edit\"\n                    className={classes.margin}\n                    onClick={() => editItemMatServ(row.id_mat_serv)}\n                  >\n                    <EditOutlinedIcon color=\"primary\" />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    onClick={(e) => deleteMatServ(row.id_mat_serv, e)}\n                  >\n                    <DeleteForeverOutlinedIcon color=\"secondary\" />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/api/serviceApi.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/components/dashboard/Estoques.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/helpers/formaters.js",[],"/home/bruno/dev/sistemasDae/dashboardDae_materialUI/src/ipBackend.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":168,"column":17,"nodeType":"123","messageId":"124","endLine":168,"endColumn":25},{"ruleId":"117","replacedBy":"125"},{"ruleId":"119","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"127","line":56,"column":10,"nodeType":"123","messageId":"124","endLine":56,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":78,"column":6,"nodeType":"130","endLine":78,"endColumn":35,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar",["132"],["133"],"'custo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setItemsMatServ'. Either include it or remove the dependency array.","ArrayExpression",["134"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [listItemsMatServ, idServico, setItemsMatServ]",{"range":"137","text":"138"},[2670,2699],"[listItemsMatServ, idServico, setItemsMatServ]"]